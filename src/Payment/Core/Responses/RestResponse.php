<?php namespace HcDisat\Payment\Responses;

use HcDisat\Payment\Core\Contracts\RequestContract;

class RestResponse extends AbstractResponse
{
    /**
     * @var RequestContract
     */
    protected $request;

    /**
     * @var array
     */
    protected $data;
    /**
     * @var int
     */
    private $statusCode;

    /**
     * RestResponse constructor.
     * @param RequestContract $request
     * @param array $data
     * @param int $statusCode
     */
    public function __construct(RequestContract $request, array $data, $statusCode = 200)
    {
        parent::__construct($request, $data);
        $this->statusCode = $statusCode;
    }

    /**
     * get Transaction reference
     * @return mixed|string
     */
    public function getTransactionReference()
    {
        // This is usually correct for payments, authorizations, etc
        if ( $this->isValidTransaction() ) {
            foreach (array('sale', 'authorization') as $type) {
                if (!empty($this->data['transactions'][0]['related_resources'][0][$type])) {
                    return $this->data['transactions'][0]['related_resources'][0][$type]['id'];
                }
            }
        }

        // This is a fallback, but is correct for fetch transaction and possibly others
        if (!empty($this->data['id'])) {
            return $this->data['id'];
        }

        return null;
    }

    /**
     * @return bool
     */
    public function isRedirect()
    {
        return $this->getRedirectUrl() !== null;
    }

    /**
     * @return null|string
     */
    public function getRedirectUrl()
    {
        if (isset($this->data['links']) && is_array($this->data['links'])) {
            foreach ($this->data['links'] as $key => $value) {
                if ($value['rel'] == 'approval_url') {
                    return $value['href'];
                }
            }
        }

        return null;
    }

    /**
     * Get the raw data array for this message. The format of this varies from gateway to
     * gateway, but will usually be either an associative array, or a SimpleXMLElement.
     *
     * @return mixed
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Get the original request which generated this response
     *
     * @return RequestContract
     */
    public function getRequest()
    {
        return $this->request;
    }

    /**
     * Is the response successful?
     *
     * @return boolean
     */
    public function isSuccessful()
    {
        return empty($this->data['error'])
            && $this->getCode() < 400;
    }


    /**
     * Response Message
     *
     * @return null|string A response message from the payment gateway
     */
    public function getMessage()
    {
        return $this->data['error_description'] ??
            $this->data['message'] ??
            null;
    }

    /**
     * Response code
     *
     * @return null|string A response code from the payment gateway
     */
    public function getCode()
    {
        return $this->statusCode;
    }


    /**
     * get credit card reference.
     * @return mixed|null
     */
    public function getCardReference()
    {
        return $this->data['id'] ?? null;
    }

    protected function isValidTransaction()
    {
        return !empty($this->data['transactions'])
            && !empty($this->data['transactions'][0]['related_resources']);
    }

    /**
     * Is the transaction cancelled by the user?
     *
     * @return boolean
     */
    public function isCancelled()
    {
        // TODO: Implement isCancelled() method.
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        // TODO: Implement getTransactionId() method.
    }
}